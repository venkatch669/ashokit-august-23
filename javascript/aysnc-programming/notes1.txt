topic: async programming..
--------------------------
 - programming.. 
 - 
 
----------------------------
function demo(){

...
}
var a=10;
console.log("Welcome");
console.log(a+4); //14
demo();

welcome
14;
--------------
api - 
	realtime data - which we want get from database ..
	flipkart 
		- ui -> javascript -> rest endpoints -> java -> db
		
		api -3+ endpoints 
		students api 		-> response 
		marks api 			-> respose 
		teachers api 		-> respose 
		
	parllel/async programming - application performance will increase..  
--------------------------------------------------------------------------------
setTimeout
setInterval
fetch api (ajax)
promises... 
-----------

console.log("a");		//a
console.log("b");		//b
setTimeout(()=>{		// move to web api 
	console.log("c")
},1000)
console.log("d");
console.log("e");
setTimeout(()=>{		// move to web api 
	console.log("f")
})

setTimeout - will execute only once with given time..
setInterval - will execute repatevelly with some interval of time, 



REST endpoint 
	4 methods 
		- get 
		- post 
		- put 
		- delete 
	- fetch api
		facebook 
			- logined - your able to see your data - GET
					  - post image				 - POST 
					  - your edit the image text - PUT (update)
					  - delete post				 - DELETE 
					  
			CRUD Application 
			CREATE 	- post 
			READ 	- get 
			UPDATE  - put / patch 
			DELETE  - delete.. 
					  
	- XMLhttpRequest .
	- AXIOS - Interceptors 
		with token - this valid request -> succes - data 
										-> error - 401(unauthroized)
			401-> new token using refresh token 
				token 
				- request 
				
	- axios interceptor 
		- it will as intermeidator 
		- what ever request you sending it will watch - if required, it will requried headers/ body/
		- in cases, if you 401, using refresh token - it will regenerate new token - call the same api 
		
		https://javascript.plainenglish.io/how-to-implement-a-request-interceptor-like-axios-896a1431304a
		
	- PROMISE 
		when you call api -> resonse(succes) 
						 -> rejected(error) 
						 
						 1. pending 
						 2. resolved/fulfilled 
						 3. rejected 
						 
						 
						 
						 -------------------------
						 const promiseFun = new Promise(resolve, rejected){
							setTimeout(()=>{
								console.log(1);
								resolve("venkat");
							},1000)						 
						 }
						
						 axios.get("http://localhost:3004/venkat").then((res)=>{
							console.log("axios",res);
						   }).catch((ex)=>{
							console.log("something went wrong, pelase try again")
						   })
						   console.log("Weclome")
						   ----------------
						   
						   let response = await axios.get("http://localhost:3004/venkat");
						   console.log("Weclome")
			
			async/await - is alternative to handle the promise, and it makes your code into sync. 
						 to solve promises hell problem we can use async/await 
						   
						 promiseFun.then((res)=>{
							console.log(res);
								promiseFun1.then((res)=>{
									...
									
									promiseFun2.then(){
										....	
									}
								}
						 }).catch((err)=>{
							console.log(err);
						 }).finally(e){
							...
						 }
						 
						 try{
						 
						 ...
						 }
						 catch(ex){
							...
						 }
						 finally(){
							...
						 }
		
		dropdown 
		select the continent 		select country 			select state			selete ditrict
		asia						india					


	-------------------------
	3 api's need to called ->3 api responses you need move forward ? 
	
	3 api response - 
	1 - 2mins 
	2- 1 sec 
	3 - 5 mins ... 
	Promise.all(array of promises).then((res)=>{
		....
	})