
	state and props.
	
	component life cycle...
	
		-> class component 
			- life cycle 
			class App extends React.Component{
				constructor(){
					this.state={
						name:"venkat"
					}
				}
				render(){
					<div> welcome</div>
				}
			}
		-> functional component react16+
			- life cycle 
			const[data, setData] = useState({name:"venkat"});
			function App(){
				return(){
					<div> welcome </div>
				}
			}
			----
			
			::interviw questions::
				1. what is diff class component / functional componentd
					1.1 - useEffect
					1.2 - syntax is going easy 
					1.3 - pure function // functional programming.. 
					1.4 - class component follows web component principles
					1.5 - functional component follows pure javascript createElement feature 
					
				2. which is one is recomm.  why ?
					2.1 - performance.. 
					
				3. error boundaries.
					- to prevent the app broking 
						- being is javascript app, where ever you have whole app going broke 
						- try and catch ( programatically) 
						- ErrorBoundary - message(component) - you wrap with multiple elements as it Common component 
						
					- HOC (higher order component) 
						- take component as input, return the component with adding some extra params if required, or return new component 
						
						
						  <React.StrictMode>
							<App />
						  </React.StrictMode>
						  
					- pure component - it will take data, it will render the data( no other resp.. like update the state) 
						// containers -  state(local/global state)
						// components - to render given data..
					- impure component - which will render the data along with state manipulations 
					- controlled 		- we have component with forms(inut, checkbox, radio), 
					- uncontrolled component - which component don't any form elements 
				4. reconciliation(react-fiber)
				5. virtual dom : (diff alg)
					a. is copy of real dom
					b. state/props change -> it wont' directly update into real dom 
					c. update the copy of dom, 
					d. diff between copy of dom and real dom 
					e. which ever are differ those only going to update in real dom 
				5. component to component
					App 
						const getImgName = (a) =>{
							console.log("getImgName", a);
						}
						<imgcomp url="path" getFun={getImgName}/>
						
							<button onclick={()=>{
								props.getFun("Test");
							}> 
							parent - child => props 
							child - parent => 
					
					5.1 - props - drilldown 
						- its advatange 
						- its disadvtange -  unnecceary middle componentes going to re-rendered 
							- statemanagement lib.s 
								- react-context api 
								- redux 
								
							<App>
								name="venkat"
								changeTitle= ()=>{
									setName("rajesh");
								}
								
								<dashboard title={name}>
										<layout title={title}>
											<home title={title}>
												<menu title={title}> 
														list - {title}
														<button> changetitle </button>
						
					
				
				
		